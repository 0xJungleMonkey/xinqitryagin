// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2023-01-08 22:12:46.679016 -0500 EST m=+0.092389210

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Xinqi",
            "url": "http://me.com/terms.html",
            "email": "xinqidavis@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/activeadmincomments": {
            "get": {
                "description": "GetAllActiveAdminComments is a handler to get a slice of record(s) from active_admin_comments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveAdminComments"
                ],
                "summary": "Get list of ActiveAdminComments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to active_admin_comments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveAdminComments"
                ],
                "summary": "Add an record to active_admin_comments table",
                "parameters": [
                    {
                        "description": "Add ActiveAdminComments",
                        "name": "ActiveAdminComments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ActiveAdminComments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveAdminComments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/activeadmincomments/{argID}": {
            "get": {
                "description": "GetActiveAdminComments is a function to get a single record from the active_admin_comments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveAdminComments"
                ],
                "summary": "Get record from table ActiveAdminComments by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveAdminComments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from active_admin_comments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveAdminComments"
                ],
                "summary": "Update an record in table active_admin_comments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update ActiveAdminComments record",
                        "name": "ActiveAdminComments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ActiveAdminComments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveAdminComments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from active_admin_comments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveAdminComments"
                ],
                "summary": "Delete a record from active_admin_comments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveAdminComments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/activestorageattachments": {
            "get": {
                "description": "GetAllActiveStorageAttachments is a handler to get a slice of record(s) from active_storage_attachments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageAttachments"
                ],
                "summary": "Get list of ActiveStorageAttachments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to active_storage_attachments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageAttachments"
                ],
                "summary": "Add an record to active_storage_attachments table",
                "parameters": [
                    {
                        "description": "Add ActiveStorageAttachments",
                        "name": "ActiveStorageAttachments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageAttachments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageAttachments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/activestorageattachments/{argID}": {
            "get": {
                "description": "GetActiveStorageAttachments is a function to get a single record from the active_storage_attachments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageAttachments"
                ],
                "summary": "Get record from table ActiveStorageAttachments by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageAttachments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from active_storage_attachments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageAttachments"
                ],
                "summary": "Update an record in table active_storage_attachments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update ActiveStorageAttachments record",
                        "name": "ActiveStorageAttachments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageAttachments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageAttachments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from active_storage_attachments table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageAttachments"
                ],
                "summary": "Delete a record from active_storage_attachments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageAttachments"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/activestorageblobs": {
            "get": {
                "description": "GetAllActiveStorageBlobs is a handler to get a slice of record(s) from active_storage_blobs table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageBlobs"
                ],
                "summary": "Get list of ActiveStorageBlobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to active_storage_blobs table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageBlobs"
                ],
                "summary": "Add an record to active_storage_blobs table",
                "parameters": [
                    {
                        "description": "Add ActiveStorageBlobs",
                        "name": "ActiveStorageBlobs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageBlobs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageBlobs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/activestorageblobs/{argID}": {
            "get": {
                "description": "GetActiveStorageBlobs is a function to get a single record from the active_storage_blobs table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageBlobs"
                ],
                "summary": "Get record from table ActiveStorageBlobs by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageBlobs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from active_storage_blobs table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageBlobs"
                ],
                "summary": "Update an record in table active_storage_blobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update ActiveStorageBlobs record",
                        "name": "ActiveStorageBlobs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageBlobs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageBlobs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from active_storage_blobs table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ActiveStorageBlobs"
                ],
                "summary": "Delete a record from active_storage_blobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.ActiveStorageBlobs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/addresses": {
            "get": {
                "description": "GetAllAddresses is a handler to get a slice of record(s) from addresses table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Get list of Addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to addresses table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Add an record to addresses table",
                "parameters": [
                    {
                        "description": "Add Addresses",
                        "name": "Addresses",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Addresses"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Addresses"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/addresses/{argID}": {
            "get": {
                "description": "GetAddresses is a function to get a single record from the addresses table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Get record from table Addresses by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Addresses"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from addresses table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Update an record in table addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Addresses record",
                        "name": "Addresses",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Addresses"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Addresses"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from addresses table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Addresses"
                ],
                "summary": "Delete a record from addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Addresses"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/adminusers": {
            "get": {
                "description": "GetAllAdminUsers is a handler to get a slice of record(s) from admin_users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdminUsers"
                ],
                "summary": "Get list of AdminUsers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to admin_users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdminUsers"
                ],
                "summary": "Add an record to admin_users table",
                "parameters": [
                    {
                        "description": "Add AdminUsers",
                        "name": "AdminUsers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AdminUsers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AdminUsers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/adminusers/{argID}": {
            "get": {
                "description": "GetAdminUsers is a function to get a single record from the admin_users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdminUsers"
                ],
                "summary": "Get record from table AdminUsers by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AdminUsers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from admin_users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdminUsers"
                ],
                "summary": "Update an record in table admin_users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update AdminUsers record",
                        "name": "AdminUsers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AdminUsers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AdminUsers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from admin_users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AdminUsers"
                ],
                "summary": "Delete a record from admin_users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.AdminUsers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/arinternalmetadata": {
            "get": {
                "description": "GetAllArInternalMetadata is a handler to get a slice of record(s) from ar_internal_metadata table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ArInternalMetadata"
                ],
                "summary": "Get list of ArInternalMetadata",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to ar_internal_metadata table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ArInternalMetadata"
                ],
                "summary": "Add an record to ar_internal_metadata table",
                "parameters": [
                    {
                        "description": "Add ArInternalMetadata",
                        "name": "ArInternalMetadata",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ArInternalMetadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ArInternalMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/arinternalmetadata/{argKey}": {
            "get": {
                "description": "GetArInternalMetadata is a function to get a single record from the ar_internal_metadata table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ArInternalMetadata"
                ],
                "summary": "Get record from table ArInternalMetadata by  argKey",
                "operationId": "argKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "argKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ArInternalMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from ar_internal_metadata table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ArInternalMetadata"
                ],
                "summary": "Update an record in table ar_internal_metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "argKey",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update ArInternalMetadata record",
                        "name": "ArInternalMetadata",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ArInternalMetadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ArInternalMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from ar_internal_metadata table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ArInternalMetadata"
                ],
                "summary": "Delete a record from ar_internal_metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "argKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.ArInternalMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/batteries": {
            "get": {
                "description": "GetAllBatteries is a handler to get a slice of record(s) from batteries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batteries"
                ],
                "summary": "Get list of Batteries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to batteries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batteries"
                ],
                "summary": "Add an record to batteries table",
                "parameters": [
                    {
                        "description": "Add Batteries",
                        "name": "Batteries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Batteries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Batteries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/batteries/{argID}": {
            "get": {
                "description": "GetBatteries is a function to get a single record from the batteries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batteries"
                ],
                "summary": "Get record from table Batteries by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Batteries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from batteries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batteries"
                ],
                "summary": "Update an record in table batteries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Batteries record",
                        "name": "Batteries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Batteries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Batteries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from batteries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batteries"
                ],
                "summary": "Delete a record from batteries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Batteries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazeraudits": {
            "get": {
                "description": "GetAllBlazerAudits is a handler to get a slice of record(s) from blazer_audits table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerAudits"
                ],
                "summary": "Get list of BlazerAudits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to blazer_audits table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerAudits"
                ],
                "summary": "Add an record to blazer_audits table",
                "parameters": [
                    {
                        "description": "Add BlazerAudits",
                        "name": "BlazerAudits",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerAudits"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerAudits"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazeraudits/{argID}": {
            "get": {
                "description": "GetBlazerAudits is a function to get a single record from the blazer_audits table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerAudits"
                ],
                "summary": "Get record from table BlazerAudits by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerAudits"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from blazer_audits table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerAudits"
                ],
                "summary": "Update an record in table blazer_audits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update BlazerAudits record",
                        "name": "BlazerAudits",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerAudits"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerAudits"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from blazer_audits table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerAudits"
                ],
                "summary": "Delete a record from blazer_audits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerAudits"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerchecks": {
            "get": {
                "description": "GetAllBlazerChecks is a handler to get a slice of record(s) from blazer_checks table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerChecks"
                ],
                "summary": "Get list of BlazerChecks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to blazer_checks table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerChecks"
                ],
                "summary": "Add an record to blazer_checks table",
                "parameters": [
                    {
                        "description": "Add BlazerChecks",
                        "name": "BlazerChecks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerChecks"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerChecks"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerchecks/{argID}": {
            "get": {
                "description": "GetBlazerChecks is a function to get a single record from the blazer_checks table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerChecks"
                ],
                "summary": "Get record from table BlazerChecks by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerChecks"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from blazer_checks table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerChecks"
                ],
                "summary": "Update an record in table blazer_checks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update BlazerChecks record",
                        "name": "BlazerChecks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerChecks"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerChecks"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from blazer_checks table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerChecks"
                ],
                "summary": "Delete a record from blazer_checks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerChecks"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerdashboardqueries": {
            "get": {
                "description": "GetAllBlazerDashboardQueries is a handler to get a slice of record(s) from blazer_dashboard_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboardQueries"
                ],
                "summary": "Get list of BlazerDashboardQueries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to blazer_dashboard_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboardQueries"
                ],
                "summary": "Add an record to blazer_dashboard_queries table",
                "parameters": [
                    {
                        "description": "Add BlazerDashboardQueries",
                        "name": "BlazerDashboardQueries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboardQueries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboardQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerdashboardqueries/{argID}": {
            "get": {
                "description": "GetBlazerDashboardQueries is a function to get a single record from the blazer_dashboard_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboardQueries"
                ],
                "summary": "Get record from table BlazerDashboardQueries by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboardQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from blazer_dashboard_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboardQueries"
                ],
                "summary": "Update an record in table blazer_dashboard_queries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update BlazerDashboardQueries record",
                        "name": "BlazerDashboardQueries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboardQueries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboardQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from blazer_dashboard_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboardQueries"
                ],
                "summary": "Delete a record from blazer_dashboard_queries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboardQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerdashboards": {
            "get": {
                "description": "GetAllBlazerDashboards is a handler to get a slice of record(s) from blazer_dashboards table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboards"
                ],
                "summary": "Get list of BlazerDashboards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to blazer_dashboards table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboards"
                ],
                "summary": "Add an record to blazer_dashboards table",
                "parameters": [
                    {
                        "description": "Add BlazerDashboards",
                        "name": "BlazerDashboards",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboards"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerdashboards/{argID}": {
            "get": {
                "description": "GetBlazerDashboards is a function to get a single record from the blazer_dashboards table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboards"
                ],
                "summary": "Get record from table BlazerDashboards by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboards"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from blazer_dashboards table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboards"
                ],
                "summary": "Update an record in table blazer_dashboards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update BlazerDashboards record",
                        "name": "BlazerDashboards",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboards"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboards"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from blazer_dashboards table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerDashboards"
                ],
                "summary": "Delete a record from blazer_dashboards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerDashboards"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerqueries": {
            "get": {
                "description": "GetAllBlazerQueries is a handler to get a slice of record(s) from blazer_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerQueries"
                ],
                "summary": "Get list of BlazerQueries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to blazer_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerQueries"
                ],
                "summary": "Add an record to blazer_queries table",
                "parameters": [
                    {
                        "description": "Add BlazerQueries",
                        "name": "BlazerQueries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerQueries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/blazerqueries/{argID}": {
            "get": {
                "description": "GetBlazerQueries is a function to get a single record from the blazer_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerQueries"
                ],
                "summary": "Get record from table BlazerQueries by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from blazer_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerQueries"
                ],
                "summary": "Update an record in table blazer_queries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update BlazerQueries record",
                        "name": "BlazerQueries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BlazerQueries"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from blazer_queries table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BlazerQueries"
                ],
                "summary": "Delete a record from blazer_queries",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.BlazerQueries"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/buildingdetails": {
            "get": {
                "description": "GetAllBuildingDetails is a handler to get a slice of record(s) from building_details table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BuildingDetails"
                ],
                "summary": "Get list of BuildingDetails",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to building_details table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BuildingDetails"
                ],
                "summary": "Add an record to building_details table",
                "parameters": [
                    {
                        "description": "Add BuildingDetails",
                        "name": "BuildingDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BuildingDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BuildingDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/buildingdetails/{argID}": {
            "get": {
                "description": "GetBuildingDetails is a function to get a single record from the building_details table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BuildingDetails"
                ],
                "summary": "Get record from table BuildingDetails by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BuildingDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from building_details table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BuildingDetails"
                ],
                "summary": "Update an record in table building_details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update BuildingDetails record",
                        "name": "BuildingDetails",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BuildingDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BuildingDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from building_details table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BuildingDetails"
                ],
                "summary": "Delete a record from building_details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.BuildingDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/buildings": {
            "get": {
                "description": "GetAllBuildings is a handler to get a slice of record(s) from buildings table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Get list of Buildings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to buildings table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Add an record to buildings table",
                "parameters": [
                    {
                        "description": "Add Buildings",
                        "name": "Buildings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Buildings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Buildings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/buildings/{argID}": {
            "get": {
                "description": "GetBuildings is a function to get a single record from the buildings table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Get record from table Buildings by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Buildings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from buildings table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Update an record in table buildings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Buildings record",
                        "name": "Buildings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Buildings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Buildings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from buildings table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Delete a record from buildings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Buildings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/columns": {
            "get": {
                "description": "GetAllColumns is a handler to get a slice of record(s) from columns table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Get list of Columns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to columns table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Add an record to columns table",
                "parameters": [
                    {
                        "description": "Add Columns",
                        "name": "Columns",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Columns"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Columns"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/columns/{argID}": {
            "get": {
                "description": "GetColumns is a function to get a single record from the columns table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Get record from table Columns by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Columns"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from columns table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Update an record in table columns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Columns record",
                        "name": "Columns",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Columns"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Columns"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from columns table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Delete a record from columns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Columns"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "description": "GetAllCustomers is a handler to get a slice of record(s) from customers table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get list of Customers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to customers table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Add an record to customers table",
                "parameters": [
                    {
                        "description": "Add Customers",
                        "name": "Customers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Customers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/customers/{argID}": {
            "get": {
                "description": "GetCustomers is a function to get a single record from the customers table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get record from table Customers by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from customers table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Update an record in table customers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Customers record",
                        "name": "Customers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Customers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from customers table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a record from customers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Customers"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/ddl": {
            "get": {
                "description": "GetDdlEndpoints is a function to get a list of ddl endpoints available for tables in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TableInfo"
                ],
                "summary": "Gets a list of ddl endpoints available for tables in the rocket_development database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.CrudAPI"
                        }
                    }
                }
            }
        },
        "/ddl/{argID}": {
            "get": {
                "description": "GetDdl is a function to get table info for a table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TableInfo"
                ],
                "summary": "Get table info for a table in the rocket_development database by argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.CrudAPI"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/elevators": {
            "get": {
                "description": "GetAllElevators is a handler to get a slice of record(s) from elevators table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elevators"
                ],
                "summary": "Get list of Elevators",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to elevators table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elevators"
                ],
                "summary": "Add an record to elevators table",
                "parameters": [
                    {
                        "description": "Add Elevators",
                        "name": "Elevators",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Elevators"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Elevators"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/elevators/{argID}": {
            "get": {
                "description": "GetElevators is a function to get a single record from the elevators table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elevators"
                ],
                "summary": "Get record from table Elevators by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Elevators"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from elevators table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elevators"
                ],
                "summary": "Update an record in table elevators",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Elevators record",
                        "name": "Elevators",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Elevators"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Elevators"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from elevators table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elevators"
                ],
                "summary": "Delete a record from elevators",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Elevators"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "description": "GetAllEmployees is a handler to get a slice of record(s) from employees table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get list of Employees",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to employees table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Add an record to employees table",
                "parameters": [
                    {
                        "description": "Add Employees",
                        "name": "Employees",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Employees"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/employees/{argID}": {
            "get": {
                "description": "GetEmployees is a function to get a single record from the employees table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Get record from table Employees by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from employees table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Update an record in table employees",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Employees record",
                        "name": "Employees",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Employees"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from employees table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employees"
                ],
                "summary": "Delete a record from employees",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Employees"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/interventions": {
            "get": {
                "description": "GetAllInterventions is a handler to get a slice of record(s) from interventions table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interventions"
                ],
                "summary": "Get list of Interventions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to interventions table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interventions"
                ],
                "summary": "Add an record to interventions table",
                "parameters": [
                    {
                        "description": "Add Interventions",
                        "name": "Interventions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Interventions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Interventions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/interventions/{argID}": {
            "get": {
                "description": "GetInterventions is a function to get a single record from the interventions table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interventions"
                ],
                "summary": "Get record from table Interventions by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Interventions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from interventions table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interventions"
                ],
                "summary": "Update an record in table interventions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Interventions record",
                        "name": "Interventions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Interventions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Interventions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from interventions table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interventions"
                ],
                "summary": "Delete a record from interventions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Interventions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/leads": {
            "get": {
                "description": "GetAllLeads is a handler to get a slice of record(s) from leads table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Get list of Leads",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to leads table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Add an record to leads table",
                "parameters": [
                    {
                        "description": "Add Leads",
                        "name": "Leads",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Leads"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Leads"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/leads/{argID}": {
            "get": {
                "description": "GetLeads is a function to get a single record from the leads table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Get record from table Leads by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Leads"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from leads table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Update an record in table leads",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Leads record",
                        "name": "Leads",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Leads"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Leads"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from leads table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Leads"
                ],
                "summary": "Delete a record from leads",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Leads"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/maps": {
            "get": {
                "description": "GetAllMaps is a handler to get a slice of record(s) from maps table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maps"
                ],
                "summary": "Get list of Maps",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to maps table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maps"
                ],
                "summary": "Add an record to maps table",
                "parameters": [
                    {
                        "description": "Add Maps",
                        "name": "Maps",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Maps"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Maps"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/maps/{argID}": {
            "get": {
                "description": "GetMaps is a function to get a single record from the maps table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maps"
                ],
                "summary": "Get record from table Maps by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Maps"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from maps table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maps"
                ],
                "summary": "Update an record in table maps",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Maps record",
                        "name": "Maps",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Maps"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Maps"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from maps table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Maps"
                ],
                "summary": "Delete a record from maps",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Maps"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/quotes": {
            "get": {
                "description": "GetAllQuotes is a handler to get a slice of record(s) from quotes table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Get list of Quotes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to quotes table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Add an record to quotes table",
                "parameters": [
                    {
                        "description": "Add Quotes",
                        "name": "Quotes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Quotes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Quotes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/quotes/{argID}": {
            "get": {
                "description": "GetQuotes is a function to get a single record from the quotes table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Get record from table Quotes by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Quotes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from quotes table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Update an record in table quotes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Quotes record",
                        "name": "Quotes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Quotes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Quotes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from quotes table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Delete a record from quotes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Quotes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schemamigrations": {
            "get": {
                "description": "GetAllSchemaMigrations is a handler to get a slice of record(s) from schema_migrations table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchemaMigrations"
                ],
                "summary": "Get list of SchemaMigrations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to schema_migrations table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchemaMigrations"
                ],
                "summary": "Add an record to schema_migrations table",
                "parameters": [
                    {
                        "description": "Add SchemaMigrations",
                        "name": "SchemaMigrations",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SchemaMigrations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SchemaMigrations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/schemamigrations/{argVersion}": {
            "get": {
                "description": "GetSchemaMigrations is a function to get a single record from the schema_migrations table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchemaMigrations"
                ],
                "summary": "Get record from table SchemaMigrations by  argVersion",
                "operationId": "argVersion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "version",
                        "name": "argVersion",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SchemaMigrations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from schema_migrations table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchemaMigrations"
                ],
                "summary": "Update an record in table schema_migrations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "version",
                        "name": "argVersion",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update SchemaMigrations record",
                        "name": "SchemaMigrations",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SchemaMigrations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SchemaMigrations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from schema_migrations table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SchemaMigrations"
                ],
                "summary": "Delete a record from schema_migrations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "version",
                        "name": "argVersion",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.SchemaMigrations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/users_": {
            "get": {
                "description": "GetAllUsers_ is a handler to get a slice of record(s) from users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users_"
                ],
                "summary": "Get list of Users_",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page requested (defaults to 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of records in a page  (defaults to 20)",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "db sort order column",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PagedResults"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "add to add a single record to users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users_"
                ],
                "summary": "Add an record to users table",
                "parameters": [
                    {
                        "description": "Add Users_",
                        "name": "Users_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Users_"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Users_"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        },
        "/users_/{argID}": {
            "get": {
                "description": "GetUsers_ is a function to get a single record from the users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users_"
                ],
                "summary": "Get record from table Users_ by  argID",
                "operationId": "argID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Users_"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "ErrNotFound, db record for id not found - returns NotFound HTTP 404 not found error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a single record from users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users_"
                ],
                "summary": "Update an record in table users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Users_ record",
                        "name": "Users_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Users_"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Users_"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single record from users table in the rocket_development database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users_"
                ],
                "summary": "Delete a record from users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "argID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.Users_"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.CrudAPI": {
            "type": "object",
            "properties": {
                "create_url": {
                    "type": "string"
                },
                "delete_url": {
                    "type": "string"
                },
                "fetch_ddl_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "retrieve_many_url": {
                    "type": "string"
                },
                "retrieve_one_url": {
                    "type": "string"
                },
                "table_info": {
                    "type": "object",
                    "$ref": "#/definitions/model.TableInfo"
                },
                "update_url": {
                    "type": "string"
                }
            }
        },
        "api.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "api.PagedResults": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "model.ActiveAdminComments": {
            "type": "object",
            "properties": {
                "author_id": {
                    "description": "[ 6] author_id                                      bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "author_type": {
                    "description": "[ 5] author_type                                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "body": {
                    "description": "[ 2] body                                           text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[ 7] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "namespace": {
                    "description": "[ 1] namespace                                      varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "resource_id": {
                    "description": "[ 4] resource_id                                    bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "resource_type": {
                    "description": "[ 3] resource_type                                  varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 8] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.ActiveStorageAttachments": {
            "type": "object",
            "properties": {
                "blob_id": {
                    "description": "[ 4] blob_id                                        bigint               null: false  primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "created_at": {
                    "description": "[ 5] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "name": {
                    "description": "[ 1] name                                           varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "record_id": {
                    "description": "[ 3] record_id                                      bigint               null: false  primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "record_type": {
                    "description": "[ 2] record_type                                    varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                }
            }
        },
        "model.ActiveStorageBlobs": {
            "type": "object",
            "properties": {
                "byte_size": {
                    "description": "[ 5] byte_size                                      bigint               null: false  primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "checksum": {
                    "description": "[ 6] checksum                                       varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "content_type": {
                    "description": "[ 3] content_type                                   varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[ 7] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "filename": {
                    "description": "[ 2] filename                                       varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "key": {
                    "description": "[ 1] key                                            varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "metadata": {
                    "description": "[ 4] metadata                                       text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                }
            }
        },
        "model.Addresses": {
            "type": "object",
            "properties": {
                "address_type": {
                    "description": "[ 1] address_type                                   varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "city": {
                    "description": "[ 6] city                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "country": {
                    "description": "[ 8] country                                        varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[10] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "entity": {
                    "description": "[ 3] entity                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "latitude": {
                    "description": "[12] latitude                                       float                null: true   primary: false  isArray: false  auto: false  col: float           len: -1      default: []",
                    "type": "string"
                },
                "longitude": {
                    "description": "[13] longitude                                      float                null: true   primary: false  isArray: false  auto: false  col: float           len: -1      default: []",
                    "type": "string"
                },
                "notes": {
                    "description": "[ 9] notes                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_and_street": {
                    "description": "[ 4] number_and_street                              varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "postal_code": {
                    "description": "[ 7] postal_code                                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "status": {
                    "description": "[ 2] status                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "suite_or_apartment": {
                    "description": "[ 5] suite_or_apartment                             varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[11] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.AdminUsers": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 6] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "email": {
                    "description": "[ 1] email                                          varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "encrypted_password": {
                    "description": "[ 2] encrypted_password                             varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "remember_created_at": {
                    "description": "[ 5] remember_created_at                            datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "reset_password_sent_at": {
                    "description": "[ 4] reset_password_sent_at                         datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "reset_password_token": {
                    "description": "[ 3] reset_password_token                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 7] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.ArInternalMetadata": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 2] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "key": {
                    "description": "[ 0] key                                            varchar(255)         null: false  primary: true   isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 3] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "value": {
                    "description": "[ 1] value                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                }
            }
        },
        "model.Batteries": {
            "type": "object",
            "properties": {
                "building_id": {
                    "description": "[ 1] building_id                                    bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "commission_date": {
                    "description": "[ 5] CommissionDate                                 date                 null: true   primary: false  isArray: false  auto: false  col: date            len: -1      default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[10] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "employee_id": {
                    "description": "[ 0] employee_id                                    bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 2] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "information": {
                    "description": "[ 8] Information                                    text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "last_inspection_date": {
                    "description": "[ 6] LastInspectionDate                             date                 null: true   primary: false  isArray: false  auto: false  col: date            len: -1      default: []",
                    "type": "string"
                },
                "notes": {
                    "description": "[ 9] Notes                                          text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "operations_cert": {
                    "description": "[ 7] OperationsCert                                 varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "status": {
                    "description": "[ 4] Status                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "type": {
                    "description": "[ 3] Type                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[11] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.BlazerAudits": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 5] created_at                                     datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "data_source": {
                    "description": "[ 4] data_source                                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "query_id": {
                    "description": "[ 2] query_id                                       bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "statement": {
                    "description": "[ 3] statement                                      text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "user_id": {
                    "description": "[ 1] user_id                                        bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.BlazerChecks": {
            "type": "object",
            "properties": {
                "check_type": {
                    "description": "[ 7] check_type                                     varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[10] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "creator_id": {
                    "description": "[ 1] creator_id                                     bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "emails": {
                    "description": "[ 5] emails                                         text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "last_run_at": {
                    "description": "[ 9] last_run_at                                    datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "message": {
                    "description": "[ 8] message                                        text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "query_id": {
                    "description": "[ 2] query_id                                       bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "schedule": {
                    "description": "[ 4] schedule                                       varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "slack_channels": {
                    "description": "[ 6] slack_channels                                 text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "state": {
                    "description": "[ 3] state                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[11] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.BlazerDashboardQueries": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 4] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "dashboard_id": {
                    "description": "[ 1] dashboard_id                                   bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "position": {
                    "description": "[ 3] position                                       int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "query_id": {
                    "description": "[ 2] query_id                                       bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 5] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.BlazerDashboards": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 3] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "creator_id": {
                    "description": "[ 1] creator_id                                     bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "name": {
                    "description": "[ 2] name                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 4] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.BlazerQueries": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 7] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "creator_id": {
                    "description": "[ 1] creator_id                                     bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "data_source": {
                    "description": "[ 5] data_source                                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "description": {
                    "description": "[ 3] description                                    text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "name": {
                    "description": "[ 2] name                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "statement": {
                    "description": "[ 4] statement                                      text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "status": {
                    "description": "[ 6] status                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 8] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.BuildingDetails": {
            "type": "object",
            "properties": {
                "building_id": {
                    "description": "[ 0] building_id                                    bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[ 4] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 1] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "information_key": {
                    "description": "[ 2] InformationKey                                 varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 5] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "value": {
                    "description": "[ 3] Value                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                }
            }
        },
        "model.Buildings": {
            "type": "object",
            "properties": {
                "address_id": {
                    "description": "[ 1] address_id                                     bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[ 9] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "customer_id": {
                    "description": "[ 0] customer_id                                    bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "email_of_admin_of_building": {
                    "description": "[ 4] EmailOfAdminOfBuilding                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "full_name_of_building_admin": {
                    "description": "[ 3] FullNameOfBuildingAdmin                        varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "full_name_of_tech_contact_for_building": {
                    "description": "[ 6] FullNameOfTechContactForBuilding               varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 2] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "phone_num_of_building_admin": {
                    "description": "[ 5] PhoneNumOfBuildingAdmin                        int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "tech_contact_email_for_building": {
                    "description": "[ 7] TechContactEmailForBuilding                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "tech_contact_phone_for_building": {
                    "description": "[ 8] TechContactPhoneForBuilding                    int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[10] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.ColumnInfo": {
            "type": "object",
            "properties": {
                "column_length": {
                    "type": "integer"
                },
                "column_type": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "database_type_name": {
                    "type": "string"
                },
                "database_type_pretty": {
                    "type": "string"
                },
                "default_value": {
                    "type": "string"
                },
                "go_field_name": {
                    "type": "string"
                },
                "go_field_type": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "is_array": {
                    "type": "boolean"
                },
                "is_auto_increment": {
                    "type": "boolean"
                },
                "is_nullable": {
                    "type": "boolean"
                },
                "is_primary_key": {
                    "type": "boolean"
                },
                "json_field_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "protobuf_field_name": {
                    "type": "string"
                },
                "protobuf_field_pos": {
                    "type": "integer"
                },
                "protobuf_field_type": {
                    "type": "string"
                }
            }
        },
        "model.Columns": {
            "type": "object",
            "properties": {
                "battery_id": {
                    "description": "[ 0] battery_id                                     bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[ 7] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 1] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "information": {
                    "description": "[ 5] Information                                    text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "notes": {
                    "description": "[ 6] Notes                                          text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "num_of_floors_served": {
                    "description": "[ 3] NumOfFloorsServed                              int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "status": {
                    "description": "[ 4] Status                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "type": {
                    "description": "[ 2] Type                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 8] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Customers": {
            "type": "object",
            "properties": {
                "address_id": {
                    "description": "[ 0] address_id                                     bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "company_contact_e_mail": {
                    "description": "[ 9] CompanyContactEMail                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "company_contact_phone": {
                    "description": "[ 8] CompanyContactPhone                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "company_desc": {
                    "description": "[10] CompanyDesc                                    text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "company_hq_adress": {
                    "description": "[ 6] CompanyHQAdress                                varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "company_name": {
                    "description": "[ 5] CompanyName                                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[14] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "customer_creation_date": {
                    "description": "[ 3] CustomerCreationDate                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "date": {
                    "description": "[ 4] date                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "full_name_of_company_contact": {
                    "description": "[ 7] FullNameOfCompanyContact                       varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "full_name_service_tech_auth": {
                    "description": "[11] FullNameServiceTechAuth                        varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 2] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "tech_auth_phone_service": {
                    "description": "[12] TechAuthPhoneService                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "tech_manager_email_service": {
                    "description": "[13] TechManagerEmailService                        varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[15] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "user_id": {
                    "description": "[ 1] user_id                                        bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Elevators": {
            "type": "object",
            "properties": {
                "column_id": {
                    "description": "[ 0] column_id                                      bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                },
                "commision_date": {
                    "description": "[ 6] CommisionDate                                  date                 null: true   primary: false  isArray: false  auto: false  col: date            len: -1      default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[11] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 1] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "information": {
                    "description": "[ 9] Information                                    text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "inspection_cert": {
                    "description": "[ 8] InspectionCert                                 varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "last_inspection_date": {
                    "description": "[ 7] LastInspectionDate                             date                 null: true   primary: false  isArray: false  auto: false  col: date            len: -1      default: []",
                    "type": "string"
                },
                "model": {
                    "description": "[ 3] Model                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "notes": {
                    "description": "[10] Notes                                          text(65535)          null: true   primary: false  isArray: false  auto: false  col: text            len: 65535   default: []",
                    "type": "string"
                },
                "serial_number": {
                    "description": "[ 2] SerialNumber                                   int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "status": {
                    "description": "[ 5] Status                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "type": {
                    "description": "[ 4] Type                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[12] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Employees": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 6] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "email": {
                    "description": "[ 5] email                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "first_name": {
                    "description": "[ 2] first_name                                     varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 1] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "last_name": {
                    "description": "[ 3] last_name                                      varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "title": {
                    "description": "[ 4] title                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 7] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "user_id": {
                    "description": "[ 0] user_id                                        bigint               null: true   primary: false  isArray: false  auto: false  col: bigint          len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Interventions": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "[ 1] author                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "battery_id": {
                    "description": "[ 4] battery_id                                     int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "building_id": {
                    "description": "[ 3] building_id                                    int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "column_id": {
                    "description": "[ 5] column_id                                      int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[13] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "customer_id": {
                    "description": "[ 2] customer_id                                    int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "elevator_id": {
                    "description": "[ 6] elevator_id                                    int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "employee_id": {
                    "description": "[ 7] employee_id                                    int                  null: true   primary: false  isArray: false  auto: false  col: int             len: -1      default: []",
                    "type": "string"
                },
                "end_datetime": {
                    "description": "[ 9] end_datetime                                   datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "report": {
                    "description": "[11] report                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "result": {
                    "description": "[10] result                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "start_datetime": {
                    "description": "[ 8] start_datetime                                 datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "status": {
                    "description": "[12] status                                         varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[14] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Leads": {
            "type": "object",
            "properties": {
                "attached_file": {
                    "description": "[ 9] Attached_file                                  blob                 null: true   primary: false  isArray: false  auto: false  col: blob            len: -1      default: []",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "bussiness_name": {
                    "description": "[ 2] Bussiness_name                                 varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[11] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "creation_date": {
                    "description": "[10] Creation_date                                  datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "department_incharge": {
                    "description": "[ 7] Department_incharge                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "email": {
                    "description": "[ 3] Email                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "full_name_of_the_contact": {
                    "description": "[ 1] Full_name_of_the_contact                       varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "message": {
                    "description": "[ 8] Message                                        varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "phone": {
                    "description": "[ 4] Phone                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "project_description": {
                    "description": "[ 6] Project_description                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "project_name": {
                    "description": "[ 5] Project_name                                   varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[12] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Maps": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 1] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "[ 2] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.Quotes": {
            "type": "object",
            "properties": {
                "building_type": {
                    "description": "[ 1] building_type                                  varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "company_name": {
                    "description": "[19] company_name                                   varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "created_at": {
                    "description": "[16] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "department": {
                    "description": "[22] department                                     varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "elevator_price": {
                    "description": "[13] elevator_price                                 varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "email": {
                    "description": "[20] email                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "final_price": {
                    "description": "[15] final_price                                    varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "installation_fee": {
                    "description": "[14] installation_fee                               varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "name": {
                    "description": "[18] name                                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_apartments": {
                    "description": "[ 3] number_of_apartments                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_basements": {
                    "description": "[ 6] number_of_basements                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_businesses": {
                    "description": "[ 5] number_of_businesses                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_cages": {
                    "description": "[ 8] number_of_cages                                varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_elevators_needed": {
                    "description": "[11] number_of_elevators_needed                     varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_floors": {
                    "description": "[ 4] number_of_floors                               varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_hours": {
                    "description": "[10] number_of_hours                                varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_occupants": {
                    "description": "[ 9] number_of_occupants                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "number_of_parking": {
                    "description": "[ 7] number_of_parking                              varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "phone": {
                    "description": "[21] phone                                          varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "price_per_unit": {
                    "description": "[12] price_per_unit                                 varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "project_description": {
                    "description": "[24] project_description                            varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "project_name": {
                    "description": "[23] project_name                                   varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "service_quality": {
                    "description": "[ 2] service_quality                                varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[17] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        },
        "model.SchemaMigrations": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "[ 0] version                                        varchar(255)         null: false  primary: true   isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                }
            }
        },
        "model.TableInfo": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ColumnInfo"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Users_": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "[ 6] created_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "email": {
                    "description": "[ 1] email                                          varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "encrypted_password": {
                    "description": "[ 2] encrypted_password                             varchar(255)         null: false  primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "id": {
                    "description": "[ 0] id                                             bigint               null: false  primary: true   isArray: false  auto: true   col: bigint          len: -1      default: []",
                    "type": "integer"
                },
                "remember_created_at": {
                    "description": "[ 5] remember_created_at                            datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "reset_password_sent_at": {
                    "description": "[ 4] reset_password_sent_at                         datetime             null: true   primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                },
                "reset_password_token": {
                    "description": "[ 3] reset_password_token                           varchar(255)         null: true   primary: false  isArray: false  auto: false  col: varchar         len: 255     default: []",
                    "type": "string"
                },
                "updated_at": {
                    "description": "[ 7] updated_at                                     datetime             null: false  primary: false  isArray: false  auto: false  col: datetime        len: -1      default: []",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "xinqi.dev:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Sample CRUD api for rocket_development db",
	Description: "Sample CRUD api for rocket_development db",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
